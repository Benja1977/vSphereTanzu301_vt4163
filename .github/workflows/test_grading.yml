name: test_grading
on:
  pull_request_target:
    types: [opened]
    paths:
    - 'static/admin/userdata/tests/**.yml'

# verify course registration
# extract pr file body from pr event
# curl answer key file
# compare response body values with answer key values
# prepare grading report
# post grading report to member profile repo
# if passing grade, update member course record page
# post message with link to grading report to pr ticket
# close pr ticket

jobs:
  job_verify_course_registration:
    name: verify_course_registration
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.isregistered.outputs.isregistered }}
    steps:
      - name: review event details
        run: |
          env
          cat /home/runner/work/_temp/_github_workflow/event.json
      - name: set source org/repo as envar org_repo
      # This is done because it seems GITHUB_REPOSITORY is a system-local default env not usable in the actions {{ env.var }} format
        run: |
          echo $(echo org_repo="$GITHUB_REPOSITORY") >> $GITHUB_ENV
      - name: curl course registration index 
        run: |
          curl \
            -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/modernappsninja/${{ github.event.base.repo.name }}/contents/static/admin/userdata/registered_members/${{ github.event.sender.login }}.yml" \
            -o /tmp/check_registration
          # extract name field from response - note that name field is only present if file is found in index
          cat /tmp/check_registration_response | jq -r '.name' >> /tmp/check_registration_response_name
      - name: check if member record exists and set envar isregistered=[true/false]
        run: |
          cat /tmp/check_registration_response_name
          if [ "$(cat /tmp/check_registration_response_name)" = "${{ github.event.sender.login }}" ]
          then
            echo isregistered=true >> $GITHUB_ENV
            echo "the requesting user is a member"
          else
            echo isregistered=false >> $GITHUB_ENV
            echo "the requesting user is not a member"
          fi
          echo $isregistered
      - id: isregistered
        if: env.isregistered == 'true'
        run: echo "::set-output name=isregistered::true"
      - name: if not member, post message to pr
        if: env.isregistered == 'false'
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"event": "COMMENT", "body": "@${{ github.event.sender.login }} You must first register for this course before submitting test responses. Please refer to the course introduction section for instructions on how to register. This Pull Request will now be closed, thank you!"}' \
          "https://api.github.com/repos/${{ env.org_repo }}/pulls/${{ github.event.number }}/reviews" \
          -o /tmp/pr_comment_post_response.json
          cat /tmp/pr_comment_post_response.json
      - name: if not member, close pr
        if: env.isregistered == 'false'
        run: |
          curl -X PATCH \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"state": "closed"}' \
          "https://api.github.com/repos/${{ env.org_repo }}/pulls/${{ github.event.number }}" \
          -o /tmp/close_pr_response.json
          cat /tmp/close_pr_response.json
  job_test_grading:
    name: test_grading
    needs: job_verify_membership
    runs-on: ubuntu-latest
    if: needs.job_verify_membership.outputs.isregistered == 'true'
    steps:
      - name: review event details
        run: |
          env
          cat /home/runner/work/_temp/_github_workflow/event.json
      - name: install yq
        run: |
          sudo snap install yq
      - name: set org/repo as org_repo
        run: |
          echo $(echo org_repo="$GITHUB_REPOSITORY") >> $GITHUB_ENV
          echo $org_repo
      - name: curl file list for pr
        run: |
          curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          "https://api.github.com/repos/${{ env.org_repo }}/pulls/${{ github.event.number }}/files" \
          -o /tmp/pr_file_list.json
      - name: set envar pr_filename as filename value
        run: |
          cat /tmp/pr_file_list.json | jq -r '.filename' > /tmp/pr_filename
          echo pr_filename=$(cat /tmp/pr_filename) >> $GITHUB_ENV
      - name: set envar test_name as filename with extension removed
        run: |
          echo test_name=$(echo ${{ env.pr_filename }} | sed 's/\..*//g') >> $GITHUB_ENV
      - name: set raw link to pr file as envar pr_raw_file_url
        run: |
          cat /tmp/pr_file_list.json | jq -r '.raw_url' > /tmp/pr_raw_file_url
          echo pr_raw_file_url=$(cat /tmp/pr_raw_file_url) >> $GITHUB_ENV
      - name: curl the pr file
        run: |
          echo "the env.pr_raw_file_url value is: ${{ env.pr_raw_file_url }}"
          curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          "${{ env.pr_raw_file_url }}" \
          -o /tmp/pr_raw_file.yml
          cat /tmp/pr_raw_file.yml
      - name: curl the answer key
        run: |
          curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          "https://raw.githubusercontent.com/modernapsninja/admin-private/main/appdata/courses/${{ github.event.repository.name }}/answer_strings/${{ env.test_name }}.string"" \
          -o /tmp/key.${{ env.pr_filename }}.raw
      # Below step is scaffolding for a test metadata file concept to enhance test customizability, but is not yet implemented
      # - name: curl the test metadata file
      #   run: |
      #     curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
      #     "https://raw.githubusercontent.com/modernapsninja/admin-private/main/appdata/courses/${{ github.event.base.repo.name }}/meta.${{ env.pr_filename }}" \
      #     -o /tmp/meta.${{ env.pr_filename }}
      - name: decode answer key file
        run: |
          cat /tmp/key.${{ env.pr_filename }}.raw | base64 -d > /tmp/key.${{ env.pr_filename }}
      - name: diff pr_raw_file.yml against test answer key
        run: |
          diff -iwB /tmp/key.${{ env.pr_filename }} /tmp/pr_raw_file.yml > /tmp/diff_results_raw
          cat /tmp/diff_results_raw
      - name: clean diff results file
        run: |
          awk '/^/' /tmp/diff_results_raw | sed -e 's/^< //g' > /tmp/wrong_answers
      - name: set question count value for total questions and wrong_answer questions
        run: |
          echo total_question_count=$(grep -ci /tmp/key.${{ env.pr_filename }})
          echo total_question_count=$(grep -ci /tmp/key.${{ env.pr_filename }}) >> $GITHUB_ENV
          echo wrong_question_count=$(grep -ci /tmp/wrong_answers)
          echo wrong_question_count=$(grep -ci /tmp/wrong_answers) >> $GITHUB_ENV
      - name: set envar percent_correct as percent correct by comparing line count of diff results to line count of answer key
        run: |
          echo percent_correct=$(bc <<< 'scale=2; (1-('${{ env.wrong_question_count }}'/'${{ env.total_question_count}}'))*100') \
          | sed 's/\..*//g'
          echo percent_correct=$(bc <<< 'scale=2; (1-('${{ env.wrong_question_count }}'/'${{ env.total_question_count}}'))*100') \
          | sed 's/\..*//g' >> $GITHUB_ENV
      - name: set envar passing_percent
        run: echo passing_percent=70 >> $GITHUB_ENV
        # run: echo passing_percent=$(yq e '.passing_percent' /tmp/meta.${{ env.pr_filename }}) >> $GITHUB_ENV
      - name: set envar passing_grade=true/false
        run: |
          if [ ${{ env.percent_correct}} -ge ${{ env.passing_percent }}]
          then
            echo "passing_grade_phrase=You Passed the Test!" >> $GITHUB_ENV 
            echo passing_grade=true >> $GITHUB_ENV
          else
            echo "passing_grade_phrase=You Did Not Pass the Test. Please review the incorrect answers below and retake the test when ready" >> $GITHUB_ENV
            echo passing_grade=false >> $GITHUB_ENV
          fi
      - name: prepare grade report
        run: |
          echo "Member Grade Report for ${{ github.event.sender.login }} for ${{ env.test_name }}" > /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          echo "--------" >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          echo "Member Github Account Login: ${{ github.event.sender.login }}" >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          echo "Member Github Account ID ${{ github.event.sender.id }}" >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          echo "Test Name: ${{ env.test_name }}" >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          echo "Course URL: https://modernappsninja.github.io/${{ github.event.base.repo.name }}/" >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          echo "--------" >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          echo "Test Result: ${{ env.passing_grade_phrase }}" >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          echo "Minimum Passing Percentage: ${{ env.passing_percent }}%" >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          echo "Percent of Questions You Answered Correctly: ${{ env.percent_correct }}%" >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          echo "--------" >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          echo "The following questions were incorrect in your test submission:" >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
          cat /tmp/wrong_answers >> /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt
      - name: encode grade report with base64 -w 0
        run: |
          cat /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt | base64 -w 0 > /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt.base64
          cat /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt.base64
      - name: post grade report to member repo
        run: |
          curl -X PUT \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"message": "Posting Member Grade Report grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt", "content": "'$(cat /tmp/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt.base64)'"}' \
          "https://api.github.com/repos/modernappsninjas/${{ github.event.sender.login }}/contents/static/userdata/courses/${{ github.event.base.repo.name }}/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt" \
          -o /tmp/member_grade_report_post_response.json
          cat /tmp/member_grade_report_post_response.json
      - name: if passing, pull member record and course card files
        if: env.passing_grade == 'true'
        run: |
          # Pull member record file
          curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          "https://raw.githubusercontent.com/modernapsninjas/${{ github.event.sender.login }}/main/appdata/courses/${{ github.event.base.repo.name }}/coursecard/member_record.yml" \
          -o /tmp/member_record.yml.old
          cat /tmp/member_record.yml.old
          # Pull latest student course card stub template
          curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          "https://raw.githubusercontent.com/modernapsninja/${{ github.event.base.repo.name }}/main/static/admin/assets/coursecards/memberrepocard/student_course_card_stub.md" \
          -o /tmp/student_course_card_stub.md
          cat /tmp/student_course_card_stub.md
          # Pull latest course_meta.yml card
          curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          "https://raw.githubusercontent.com/modernapsninja/${{ github.event.base.repo.name }}/main/static/admin/assets/coursecards/course_meta.yml" \
          -o /tmp/course_meta.yml
          cat /tmp/course_meta.yml
      - name: if passing, prepare updated member course card
        if: env.passing_grade == 'true'
        run: |
          # Update member course record file to reflect passing grade for this test
          yq e 'Tests.${{ env.test_name }} = "[Test Completed with Passing Grade](https://github.com/modernappsninjas/${{ github.event.sender.login }}/static/userdata/courses/${{ github.event.base.repo.name }}/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt)"' /tmp/member_record.yml.old > /tmp/member_record.yml
          # combine course meta, student course card stub and member record files to create new member course card file
          cat /tmp/course_meta.yml > /tmp/member_course_card.md
          cat /tmp/student_course_card_stub.md >> /tmp/member_course_card.md
          cat /tmp/member_record.yml >> /tmp/member_course_card.md
          cat /tmp/member_course_card.md
          cat /tmp/member_course_card.md | base64 -w 0 >> /tmp/member_course_card.md.base64
      - name: if passing, post updated member course card to member repo
        if: env.passing_grade == 'true'
        run: |
          curl -X PUT \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"message": "Posting Member Grade Report grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt", "content": "'$(cat /tmp/member_course_card.md.base64)'"}' \
          "https://api.github.com/repos/modernappsninjas/${{ github.event.sender.login }}/contents/content/english/course/${{ github.event.base.repo.name }}.md" \
          -o /tmp/member_course_card_post_response.json
          cat /tmp/member_course_card_post_response.json
      - name: if passing, post message to pr
        if: env.passing_grade == 'true'
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"event": "COMMENT", "body": "@${{ github.event.sender.login }} Congratulations, you have passed the test! Your [grade report](https://github.com/modernappsninjas/${{ github.event.sender.login }}/static/userdata/courses/${{ github.event.base.repo.name }}/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt) and [course record card](https://modernappsninjas.github.io/${{ github.event.sender.login }}/course/${{ github.event.base.repo.name }}.md) have been updated in your member repository to reflect your passing grade.Please note this PR will be closed and not merged to keep the answer sheet clear for other users. We recommend deleting the branch in your fork you used to submit this PR."}' \
          "https://api.github.com/repos/${{ env.org_repo }}/pulls/${{ github.event.number }}/reviews" \
          -o /tmp/pr_comment_post_response.json
          cat /tmp/pr_comment_post_response.json
      - name: if not passing, post message to pr
        if: env.passing_grade == 'false'
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"event": "COMMENT", "body": "@${{ github.event.sender.login }} This message is to inform you that you did not successfully pass ${{ env.test_name }}. Please see your [grade report](https://github.com/modernappsninjas/${{ github.event.sender.login }}/static/userdata/courses/${{ github.event.base.repo.name }}/grade_report.pr${{ github.event.number }}.${{ env.test_name }}.txt) for additional details. Please note this PR will be closed and not merged to keep the answer sheet clear for other users. We recommend deleting the branch in your fork you used to submit this PR."}' \
          "https://api.github.com/repos/${{ env.org_repo }}/pulls/${{ github.event.number }}/reviews" \
          -o /tmp/pr_comment_post_response.json
          cat /tmp/pr_comment_post_response.json
      - name: CLOSE pull request
        run: |
          curl -X PATCH \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"state": "closed"}'                                                        \
          "https://api.github.com/repos/${{ env.org_repo }}/pulls/${{ github.event.number }}" \
          -o /tmp/pr_close_response.json
          cat /tmp/pr_close_response.json